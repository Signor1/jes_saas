  [1 templating/parsing errors found]
Unfixable violations detected.
Unfixable violations detected.
-- -- Add new tables  users, cart, cart_items
-- CREATE TABLE IF NOT EXISTS users (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     user_name VARCHAR(255),
--     wallet_address VARCHAR(42) NOT NULL UNIQUE,
--     email VARCHAR(255) UNIQUE,
--     phone_number VARCHAR(20),
--     house_address TEXT,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
--     updated_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp
-- );
--
-- CREATE TABLE IF NOT EXISTS cart (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     user_id UUID NOT NULL,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
--     updated_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
--     CONSTRAINT cart_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (
--         id
--     ) ON DELETE CASCADE
-- );
--
-- CREATE TABLE IF NOT EXISTS cart_items (
--     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
--     cart_id UUID NOT NULL,
--     product_id UUID NOT NULL,
--     quantity INTEGER NOT NULL,
--     created_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
--     updated_at TIMESTAMP WITH TIME ZONE DEFAULT current_timestamp,
--     CONSTRAINT cart_items_cart_id_fkey FOREIGN KEY (cart_id) REFERENCES cart (
--         id
--     ) ON DELETE CASCADE,
--     CONSTRAINT cart_items_product_id_fkey FOREIGN KEY (
--         product_id
--     ) REFERENCES products (id) ON DELETE CASCADE,
--     CONSTRAINT cart_items_quantity_check CHECK (quantity > 0)
-- );
--
-- -- Add user_id to orders
-- ALTER TABLE orders
-- ADD COLUMN IF NOT EXISTS user_id UUID,
-- ADD CONSTRAINT orders_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (
--     id
-- ) ON DELETE CASCADE;
--
-- -- Create indexes
-- CREATE INDEX IF NOT EXISTS idx_orders_user_id ON orders (user_id);
-- CREATE INDEX IF NOT EXISTS idx_cart_user_id ON cart (user_id);
-- CREATE INDEX IF NOT EXISTS idx_cart_items_cart_id ON cart_items (cart_id);
--
-- -- Create triggers
-- CREATE OR REPLACE FUNCTION update_timestamp()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     NEW.updated_at = CURRENT_TIMESTAMP;
--     RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;
--
-- CREATE TRIGGER update_users_timestamp
-- BEFORE UPDATE ON users
-- FOR EACH ROW
-- EXECUTE FUNCTION update_timestamp();
--
-- CREATE TRIGGER update_cart_timestamp
-- BEFORE UPDATE ON cart
-- FOR EACH ROW
-- EXECUTE FUNCTION update_timestamp();
--
-- CREATE TRIGGER update_cart_items_timestamp
-- BEFORE UPDATE ON cart_items
-- FOR EACH ROW
-- EXECUTE FUNCTION update_timestamp();
